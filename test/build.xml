<!-- ===========================================================================


Introduction
============

See the build targets for the tasks this ant build file supports


Installing the build tools
==========================

For instructions on JDOM use of Ant see the build.xml find in the "jdom"
module (../jdom).

Build targets
=============

These are the meaningful targets for this build file:

 - package [default] -> creates ./build/jdom-test.jar
 - compile -> compiles the contributed source code
 - javadoc -> generates the API documentation in ./build/javadocs
 - clean -> restores the distribution to its original and clean state
 - test -> runs tests one test class at a time (all test cases starting with "Test")
 - testui -> runs JUnit gui and starts automatically with Alltests
 - testreport -> Calls the Ant/Junit task to build javadoc style test output
 after you have run the test task.  These aren't automatically done because it
 takes more time and that may not be desired when the tests normally succeed.

-->

<project default="package" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="JDOM Test suite"/>
    <property name="name" value="jdom-test"/>
    <property name="version" value="1.0 prerelease"/>
    <property name="year" value="2001"/>

    <echo message="----------- ${Name} ${version} [${year}] ------------"/>

    <property name="build.compiler" value="classic"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="off"/>

    <property name="src.dir" value="./src/java"/>
    <property name="lib.dir" value="./lib"/>
	<property name="jdom.dir" value="../jdom"/>
	<property name="jdom.jar" value="${jdom.dir}/build/jdom.jar"/>
	<property name="parser.jar" value="${jdom.dir}/lib/xerces.jar"/>
	<property name="jaxp.jar" value="${jdom.dir}/lib/jaxp.jar"/>
	<property name="packages" value="org.jdom.test.*"/>

	<path id="project.class.path">
	  <pathelement location="${jdom.jar}" />
	  <pathelement location="${jaxp.jar}" />
	  <!--probably need to improve on this because the java classpath
	      will have a parser in it because ant requires it -->
	  <pathelement location="${parser.jar}" />
	  <pathelement location="build/jdom-test.jar" />
      <pathelement path="${java.class.path}" />
    </path>


	<echo message="Running tests against ${jdom.jar} using parser ${parser.jar}"/>

    <property name="build.dir" value="./build"/>
    <property name="build.src" value="./build/src"/>
    <property name="build.dest" value="./build/classes"/>
    <property name="build.javadocs" value="./build/apidocs"/>

    <property name="test.jarFile" value="./build/jdom-test.jar"/>
    <property name="test.outputDir" value="./testOutput"/>
    <property name="test.scratchDir" value="./tmp"/>
	<!-- choose between xml and plain text output for tests -->
    <property name="test.outputFormat" value="xml"/>

    <property name="dist.root" value="./dist"/>
    <property name="dist.dir" value="${dist.root}/${name}-${version}"/>

    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>
    <filter token="log" value="true"/>
    <filter token="verbose" value="true"/>

    <!-- JDK1.1 collections -->
    <property name="coll.import" value="com.sun.java.util.collections"/>
    <available classname="${coll.import}.Collection" property="coll.present"/>

  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="JDOM Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   package  --> generates the jdom-test.jar file (default)"/>
    <echo message="   compile  --> compiles the contributed source code"/>
    <echo message="   javadoc  --> generates the API documentation"/>
    <echo message="   clean    --> restores the distribution to its clean state"/>
    <echo message="   test     --> runs JUnit tests for all tests in build"/>
    <echo message="   testreport   --> build html report from test output"/>
    <echo message="   testui   --> runs JUnit tests with Swing UI"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
  </target>
  <!-- =================================================================== -->
  <!-- Prepares the test output directory                                  -->
  <!-- =================================================================== -->
  <target name="prepare-tests" depends="init">
    <mkdir dir="${test.outputDir}"/>
    <mkdir dir="${test.scratchDir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the source code                                            -->
  <!-- =================================================================== -->
  <target name="prepare-src" depends="prepare">
    <!-- create directories -->
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>

    <!-- copy src files -->
    <copy toDir="${build.src}" >
		<fileset dir="${src.dir}" includes="**/*.java, **/*.properties" />
	</copy>

  </target>

  <!-- =================================================================== -->
  <!-- Does replacement on files for dealing with collections.             -->
  <!-- XXX The efficiency could be improved here; all replacements should  -->
  <!-- XXX happen during one read/write phase and only for files that have -->
  <!-- XXX changed.                                                        -->
  <!-- =================================================================== -->
  <target name="collections" if="coll.present" depends="prepare-src">
    <replace dir="${build.src}" includes="org/**"
             token="java.util.Collection" value="${coll.import}.Collection"/>
    <replace dir="${build.src}" includes="org/**"
             token="java.util.Map" value="${coll.import}.Map"/>
    <replace dir="${build.src}" includes="org/**"
             token="java.util.HashMap" value="${coll.import}.HashMap"/>
    <replace dir="${build.src}" includes="org/**"
             token="java.util.List" value="${coll.import}.List"/>
    <replace dir="${build.src}" includes="org/**"
             token="java.util.LinkedList" value="${coll.import}.LinkedList"/>
    <replace dir="${build.src}" includes="org/**"
             token="java.util.Iterator" value="${coll.import}.Iterator"/>
    <!-- The following replace handles the "import java.util.*" case by    -->
    <!-- adding an "import com.sun.java.util.collections.*" after it.      -->
    <!-- BTW, \u000a is the Unicode escape for a new line. (jhunter)       -->
    <replace dir="${build.src}" includes="org/**"
             token="java.util.*"
             value="java.util.*;\u000aimport ${coll.import}.*"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare-src,collections">
	  <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
		   optimize="${optimize}">
	   <classpath refid="project.class.path" />
   </javac>
	<copy toDir="${build.dest}" >
		<fileset dir="${build.src}" includes="**/*.properties" />
	</copy>
		
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class package                                           -->
  <!-- =================================================================== -->
  <target name="package" depends="compile">
    <fixcrlf srcdir="." includes="**/*.bat" excludes="build*.*" eol="crlf"/>
	<fixcrlf srcdir="." includes="**/*.sh" excludes="build*.*" eol="lf"/>
    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${build.dest}"
         includes="org/**, **/*.properties"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadoc" depends="prepare-src">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Brett McLaughlin, Jason Hunter. All Rights Reserved."
    />
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
	<delete dir="${build.dir}"/>
    <delete file="${docs.dir}/changes.xml"/>
    <delete file="${docs.dir}/todo.xml"/>
    <delete file="${docs.dir}/book.xml"/>
  </target>

  <target name="distclean" depends="clean">
    <delete dir="${dist.root}"/>
    <delete file="${Name}-${version}.tar.gz"/>
    <delete file="${Name}-${version}.tar"/>
    <delete file="${Name}-${version}.zip"/>
  </target>
  
  <target name="test" depends="init, prepare-tests">
    <junit printSummary="yes">
	  <classpath refid="project.class.path">
      </classpath>
  
	  <formatter type="${test.outputFormat}" />

      <batchtest fork="yes" todir="${test.outputDir}">
        <fileset dir="${build.src}">
          <include name="**/*Test*.java" />
          <exclude name="**/generate/**" />
        </fileset>
      </batchtest>
  </junit>
  </target>
  <target name="testreport" >
  <!--ugh, a few oddities.  Xalan must be in the lib directory and
      there must be an optional.jar there.  It won't use variables
      open index.html in the testOutput directory and you do get a
      nice report
      -->

  <junitreport todir="./testOutput">
    <fileset dir="./testOutput">
      <include name="TEST-*.xml"/>
    </fileset>
	<report format="frames" todir="./testOutput"/>
  </junitreport>  
  </target>



  <target name="testui" depends="init, prepare-tests">
    <java classname="org.jdom.test.cases.Alltests" fork="true">
	  <arg value="-ui" />
	  <classpath refid="project.class.path" />
	</java>
  </target>
</project>

<!-- End of file -->

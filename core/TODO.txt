Items that need to be done:

--- RIGHT AWAY ---

* Add to Javadocs @throws clauses for all runtime exceptions like 
  IllegalAddException

* Look at replacing NO_NAMESPACE with null.  See below.

* Fix bug where DOMOutputter creates nodes with "" as their
  node.getNamespaceURI() even if the node is not in a namespace.
  http://lists.denveronline.net/lists/jdom-interest/2001-March/005117.html

* Fix minor XMLOutputter bug where pretty print (indented, newlines, trim
  text) prints an extra whitespace line between one closing element and 
  another.

* Implement the ability to output the same DOCTYPE as was input:
        <?xml version='1.0' ?>
        <!DOCTYPE mydtd[
        <!ENTITY nbsp '&#160;'>
        <!ENTITY aring '&#229;'>
        <!ENTITY auml '&#228;'>
        <!ENTITY ouml '&#246;'>
        <!ENTITY Aring '&#197;'>
        <!ENTITY Auml '&#196;'>
        <!ENTITY Ouml '&#214;'>]>

        <DOCUMENT>
                God forts&auml;ttning p&aring; det nya millenniet!
        </DOCUMENT>
  Probably need an Entity class with name, value, publicid, and systemid.  The
  value/publicid/systemid are optional.  Also a Notation class with name,
  publicid, systemid.  The publicid/systemid are optional.  The Entity would
  also need a possible notation name entry if it was an unparsed entity.  The 
  DocType then holds a Map of entities and notations, retrieved from the 
  SAX DTDHandler/DeclHandler or read from the DOM DocumentType.  It also can
  hold a String internalSubset a la DOM.  For SAXBuilder it'll have to build
  the string from DeclHandler.attributeDecl() and DeclHandler.elementDecl().
  Then again, maybe we just hold the whole darn thing as a String, gleaned
  from SAX or DOM as appropriate.  The question there is, what's the JDOM 
  use case for Notation and Entity maps?
  (Harry Evans <hevans@elite.com> is also working on this.)

* Consider making DocType immutable to avoid the opportunity of having the 
  same DocType on two docs where a change to one accidentally changes the 
  other.  Can it be immutable while supporting entities and notations?  
  Perhaps, if you pass in two Maps on construction.

* Add notes that element content returned by List is ordered.

* Integrate element factories in SAXBuilder.  (Ken Helland)

* Figure out how Namespace.equals() should work.  The issue's been brought up
  again.  Historic info is in
  http://lists.denveronline.net/lists/jdom-interest/2000-August/subject.html
  First message in the thread is
  http://lists.denveronline.net/lists/jdom-interest/2000-August/002171.html

* Consider a builder.setFeature() pass-through method that allows any 
  features to be set that aren't in the http://xml.org namespace.  Make
  those in http://xml.org not to be touched because either we have specific
  requirements for them to be set one way, or we have the feature exposed
  through a Java method.

* Investigate ClassLoader.loadClass() instead of Class.forName() for those
  times when the classes aren't on the system classpath.  (Suggested by Alex
  Rosen)

* Change elt.addAttribute to elt.setAttribute(), doing an implicit replace if
  necessary.  Consider using LinkedHashMap from JPDA to preserve attrib order.

* Change elt.setAttribute() to check for attributes with duplicate names & 
  namespaces.

* Enhance Verifier.checkNamespaceURI() to follow RFC 2396.

* Consider Mike Jennings' proposal of two new methods on Element:
  public String getAttributeValue(String name, String default)
  public String getAttributeValue(String name, Namespace ns, String default)
  http://lists.denveronline.net/lists/jdom-interest/2000-December/004155.html

* Fix bug where addNamespaceDeclaration() doesn't check for conflicts with the
  same prefix already existing on the element or being the element's own 
  prefix already

* Examine if it's worth doing an intern() on element and attribute names,
  or if it's too much to pay since SAX is likely doing it already
  http://www.megginson.com/SAX/Java/features.html
  Probably turn off SAX interning and do it ourselves?  Note commentary:
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003289.html

* Figure out a way to set "standalone" in the decl, like doc.setStandalone().

* Consider providing a SAX XMLFilter that would let someone remove 
  surrounding whitespace and other fancy things.
  We should probably respect xml:space.

* Consider visitor pattern (again, just to be sure)
  Use cases: count elements, count nodes, translate comments, remove PIs
  Would implement with option to visit depth or breadth first
  Maybe go crazy with pre-order, in-order, and post-order too :-)
  Methods would exist on Document and Element
  FYI, DOM's much overweight Traversal-Range spec is at
    http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113/
  Joe Bowbeer has ideas at:
  http://lists.denveronline.net/lists/jdom-interest/2000-November/003610.html

* Make entity.clone() truly a deep copy.

* Use custom singly LinkedList to save memory.  (Jools has code.)

* Consider using a List of instance data so elements only use what they really
  need (saving attrib list, namespace list)

* Change PartialList to drive directly off backing list
  - Make sure PartialList doesn't let an elt be added as a child (or 
    grandchild, etc) of itself.  See elt.addContent() logic that walks 
    ancestry.
  - Have PartialList sanity check new object types as legal.
  - Look at the issue that PartialList.listIterator() may return an Iterator
    that doesn't have logic to change the backing List and sanity check the
    change.  See post by "Chris Hamersley" <chris.hamersley@xmlglobal.com>
    31 Aug 2000.  Also a follow-on by "Peter V. Gadjokov" <pvg@c-c-s.com> 
    27 Sep 2000 and a test case by "Travers Waker" <traversw@innoforge.co.za>
    27 Sep 2000.

* Straighten up the Entity API, bringing its API in line with Element and
  supporting EntityReferences.  Make DOMBuilder and SAXBuilder work
  equivalently.  Like have DOCTYPE support entity defs.  Make sure Entity
  addChild() becomes addContent().  Make sure addContent(Comment) is added.
  It should probably have methods to get the public and system IDs too, per
  http://lists.denveronline.net/lists/jdom-interest/2000-September/002838.html.
  May also want to read:
  http://lists.denveronline.net/lists/jdom-interest/2000-September/002844.html.

* Look to keep around an embedded DTD, per
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003540.html

* Test SinglyLinkedList vs ArrayList for speed and memory consumption.
  (With OptimizeIt)

* Verify we get good error handling if someone passes null to any add/set
  method.

* Deal with getSerializedForm() calls, either implement or remove
  Note the Document and Element impls from Elliotte are at:
  http://lists.denveronline.net/lists/jdom-interest/2000-July/001327.html
  Also
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003142.html

* Consider Element.hasAttributes() and Element.isEmpty()

* Determine if DOMBuilder and DOMOutputter should transparently support DOM1.

* Look at where Namespace may need to be synchronized.  See
  http://lists.denveronline.net/lists/jdom-interest/2000-September/003009.html
  and follow-ups.

* Fix unconfirmed bug of unwanted line breaks occurring between tags.
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003241.html

* Fix issue where XMLOutputter has protected methods dependent on
  NamespaceStack, as pointed out by elharo:
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003538.html

* Look into having a flag to turn off DTD loading, since parsers often load
  the DTD even if validation is off.
  Xerces has a custom option: http://xml.apache.org/xerces-j/features.html
  Crimson doesn't, nor probably do others.  That makes it tricky.

* Figure out how to deal with XMLOutputter writing of special characters like
  &#160.  Should it char escape only chars unprintable in the current
  character set?  Or should there be a fancy API for selecting what's escaped?
  http://lists.denveronline.net/lists/jdom-interest/2001-February/004521.html

* Investigate the capabilities of David Megginson's XMLWriter at 
  http://www.megginson.com/Software/ as a way to output a document.
  More info: http://xmlhack.com/read.php?item=777

--- FOR JDOM 1.0 ---

* Expand class-level Javadocs.

* Make sure Illegal*Exception should extend IllegalArgumentException and not
  JDOMException.

* Investigate doc.getDescription() to let people add doc descriptions.  It's
  an idea from IBM's parser suggested by andyk.

* Create "build dist" for distribution
  Use fixcrlf in dist (instead of package as currently done)
  Probably include source with jdom.jar built

* Consider changing XMLOutputter to have more set methods like Enhydra's
  DOMFormatter.  Possible good ones:
   void setJavaEncoding(java.lang.String newJavaEncoding) 
                       Set the encoding using the Java encoding name.
   void setLineWidth(int width) 
                       Set the width at while long lines are split 
                       when indentation is enabled.
   void setPreserveSpace(boolean preserve) 
                       Set the default space-preservation flag.
   void setXmlEncoding(java.lang.String newXmlEncoding) 
                       Set the encoding using the XML encoding name.
   void setXmlEncoding(java.lang.String newJavaEncoding,
                       java.lang.String newXmlEncoding) 
                       Set both the XML and Java encodings.

* Figure out if there should be a public no-arg Document constructor to
  support building docs with more than just root elts.  Currently you have to
  use a trick of new Document(null).  Elliotte thinks we should go the 
  opposite way and disallow creating docs without roots, thus enforcing the
  rule that JDOM only creates well-formed docs and docs are well-formed from
  the beginning.  That makes sense to me, actually.  The builders can create a
  List and then at the end assign it as the doc's mixed content.

* Consider adding methods/logic to Verifier for all XML spec. constraints
  (Consider specifically a PCDATA check.  Downside is Elliotte says it 
   causes a 20% performance penalty on building docs.)
  Probably go with sanity checking input unless it adds significant time to
  a SAX build.
  See http://lists.denveronline.net/lists/jdom-interest/2000-August/002088.html
  And http://lists.denveronline.net/lists/jdom-interest/2000-August/002102.html

* Consider changing the Verifier method signatures to throw the
  IllegalXXXException directly instead of returning null on error,
  and let the caller pass the exception through

* Have Jools populate jdom-test

* Consider SAXBuilder.setIgnoreingWhitespace() and similar
  Should save lots of memory.

* Writing a "Getting started" guide for newbies 
  (Tom Clements <clements@eng.sun.com>)

* Make sure we have a plan for supporting obj serialization across current and
  future JDOM versions.  See "serialVersionUID" thread especially 
  Peter V. Gadjokov's remarks at
  http://lists.denveronline.net/lists/jdom-interest/2000-September/subject.html

* Perhaps have builder flags to indicate if surrounding whitespace (not just
  ignorable whitespace) should be trimmed, if entity refs should be expanded,
  if CDATA sections should be included, and if comment sections should be
  included.  All seem like reasonable customizations.

* Performance optimize.  See following thread for test data.
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003418.html
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003472.html

* Figure out permanent home for JDOMSource and JDOMResult currently living in
  jdom-contrib.  Most likely options are org.jdom.transform or in JAXP.next.
  If org.jdom.transform that could be the home of a transform implementation.

--- FOR JDOM 1.1 ---

* Add XPath support
  Much work being done by Michael Hinchey

* Figure out XPath interface, current best is this:
    List    XPath.getList(Element e, String xpath)  // or Document param
    Comment XPath.getComment(Element e, String xpath)
    Element XPath.getElement(Element e, String xpath)
    ProcIns XPath.getProcIns(Element e, String xpath)
    Entity  XPath.getEntity(Element e, String xpath)
    String  XPath.getText(Element e, String xpath)

* Eliminate string hardcoding.  Use resource bundles to allow for
  localization.

* Investigate a way to do in-memory validation.  First step is probably 
  to get an in-memory representation of a DTD as per
  http://xmlhack.com/read.php?item=626
  http://www.wutka.com/dtdparser.html
  http://lists.denveronline.net/lists/jdom-interest/2000-July/001431.html
  http://lists.denveronline.net/lists/jdom-interest/2001-February/004661.html
  Maybe new DTDValidator(dtd).validate(doc);
  Then later new SchemaValidator(schema).validate(doc);
  Could instead do doc.validate(dtd/schema) but then we'd have to dynamically 
  switch between recognizing DTDs and the various schemas.
  The method would probably either throw InvalidDocumentException or might
  take an ErrorHandler-style interface implementation if there are non-fatal
  errors possible.

* Consider a listener interface so you could listen to doc changes.  
  (Probably after 1.1 honestly; this can be done through manual subclasses
  already.)  Some pertinent messages on this topic:
  http://lists.denveronline.net/lists/jdom-interest/2000-July/001586.html
  http://lists.denveronline.net/lists/jdom-interest/2000-July/001587.html
  http://lists.denveronline.net/lists/jdom-interest/2000-July/001600.html

* Consider a "locator" ability for nodes to remember the line number on which
  they were declared, to help debug semantic errors.
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003422.html

--- UNTIED TO A JDOM VERSION ---

* Contribute the samples from Elliotte's XML DevCon talk to the samples/
  directory.  http://metalab.unc.edu/xml/slides/xmlsig/jdom/JDOM.html

* Add search for jdom.org using Google with site:www.jdom.org, imitating
  http://www.zope.org/SiteIndex/searchForm

* Fix it so check-in messages include diffs.  (jools@jools.org)  Use
  archive to create an accurate CHANGELOG.txt for what changed between betas.

* Add ElementLocator to contrib/ directory (from Alfred Lopez)

* Write a guide for contributors
    Follow Sun's coding guidelines, use 4-space (no tab) indents, no lines
    longer than 80 characters

* Investigate including a library to convert XML data to instantiated Java
  objects, probably with an XML config file dictating how to do the mapping.
  See http://xmlhack.com/read.php?item=674 for something along these lines.

* Investigate adding Andy's library (jhunter)

* Verify JDOM is compliant with Infoset
  http://xmlhack.com/read.php?item=966

* Consider a builder for a read-only document.  It could "intern" objects to
  reduce memory consumption.  In fact, interning may be good for String
  objects regardless.

* Consider having the license be clear org.jdom is a protected namespace.

--- WILD IDEAS ---

* Figure out if there's a role for a Node interface.  It sounds easy but all 
  attempts so far have hit obstacles.  Amy Lewis talks about it here:
  http://lists.denveronline.net/lists/jdom-interest/2000-December/004016.html

* Consider having element.getChild("foo") use the namespace of the invoked 
  element.  Currently is would be the default namespace.  With this new
  approach you'd pass null to use the default.  This would be more convenient,
  but the downside I see is that it would be inconsistent since 
  new Element("foo") would only create elements in the default namespace.

* Think about somewhat crazy idea of using more inheritance in JDOM to allow
  lightweight but not XML 1.0 complete implementations.  For example Element
  could have a superclass "CommonXMLElement" that supported only what Common 
  XML requires.  Builders could build such elements to be faster and lighter 
  than full elements -- perfect for things like reading config files.  Lots
  of difficulties with this design though.

* Look at Xerces parser features (http://apache.org/xml/features/dom) for
  ideas on things that may be needed.
  http://xml.apache.org/xerces-j/features.html

* Create a JDOM logo.

* Create a Verifier lookup table as an int[256] growable to int[64K] where 
  bits in the returned value indicate that char's ability to be used for a
  task.  So "lookup[(int)'x'] & LETTER_MASK" tells us if it's a letter
  or not.

* Use new Ant regexp task for more efficient JDK 1.1 package renaming.

* Consider methods to return an item's XPath, suggested by 
    Mores Stanislav <stm@prosoft.sk>
  /** Return XPath of this node */ 
  public StringBuffer getXPath(); 
  /** Return XPath of this node relative to given context node. */ 
  public StringBuffer getRelativeXPath(Element ancestor);

* Make sure we really don't need a setName()/setNamespace() option.

* Perhaps use JAXP's transform API to do JDOM transforms

* How about: Entities expanded on input; on output chars converted to entities
  only if char doesn't exist in output charset or is special character

* Consider XercesErrHandler ignoring warning/error?

* Consider having builders construct nodes that know the line number on which
  they're based.  It's something DOM3 does, and one user requested it.  The
  cost is a heavy price in memory bloat.

* Consider elt.getTreeText() which would recursively get the text (in order) 
  for the subtree, effectively ripping out interveneing Elements.  (Suggested
  by Bob to help with XPath.)

* Shouldn't addNamespaceDeclaration() have a name to match
  getAdditionalNamespaces().

* Consider an HTMLBuilder that reads not-necessarily-well-formed HTML and
  produces a JDOM Document.  The approach I'd suggest is to build on top of
  JTidy first.  That gives a working implementation fast, at the cost of a 
  157K Tidy.jar in the distribution.  After that, perhaps someone would lead 
  an effort to change the JTidy code to build a JDOM Document directly, 
  instead of making a DOM Document or XML stream first.  That would be a lot 
  faster, use less memory, and make our dist smaller.  See
  http://www.sourceforge.net/projects/jtidy for Tidy.

* Look at a (contrib?) outputter option using SAX filters per
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003303.html
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003304.html
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003318.html
  http://lists.denveronline.net/lists/jdom-interest/2000-October/003535.html

* Look at event-based parsing as per the following thread:
  http://lists.denveronline.net/lists/jdom-interest/2000-November/003613.html
  and replies.

